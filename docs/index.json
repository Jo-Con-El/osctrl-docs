[
{
	"uri": "https://osctrl.net/configuration/osctrl-services/",
	"title": "osctrl Services",
	"tags": [],
	"description": "",
	"content": " Work in progress This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-tls/",
	"title": "osctrl-tls",
	"tags": [],
	"description": "",
	"content": "Execute osquery-tls -h to show the usage of the binary:\nThis is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/deployment/vagrant/",
	"title": "Using Vagrant",
	"tags": [],
	"description": "",
	"content": " Work in progress This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/components/osctrl-tls/",
	"title": "osctrl-tls",
	"tags": [],
	"description": "",
	"content": " TLS endpoint service This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/components/",
	"title": "Components",
	"tags": [],
	"description": "",
	"content": " Components Diagram of all the different components that are part of osctrl:\n"
},
{
	"uri": "https://osctrl.net/configuration/logging/",
	"title": "Logging",
	"tags": [],
	"description": "",
	"content": " Work in progress This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-admin/",
	"title": "osctrl-admin",
	"tags": [],
	"description": "",
	"content": "Execute osquery-admin -h to show the usage of the binary:\nThis is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/deployment/docker/",
	"title": "Using Docker",
	"tags": [],
	"description": "",
	"content": " Work in progress This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/components/osctrl-admin/",
	"title": "osctrl-admin",
	"tags": [],
	"description": "",
	"content": " Admin service for osctrl This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/deployment/",
	"title": "Deployment",
	"tags": [],
	"description": "",
	"content": " Deployment Work in progress. This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/usage/osctrl-cli/",
	"title": "osctrl-cli",
	"tags": [],
	"description": "",
	"content": "Execute osquery-cli -h to show the usage of the binary.\nThis is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/deployment/natively/",
	"title": "Using provision.sh",
	"tags": [],
	"description": "",
	"content": " Work in progress This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/components/osctrl-cli/",
	"title": "osctrl-cli",
	"tags": [],
	"description": "",
	"content": " CLI for osctrl This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " Configuration Work in progress. This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/usage/provision.sh/",
	"title": "provision.sh",
	"tags": [],
	"description": "",
	"content": "provision.sh is the provisioning script for osctrl in Ubuntu 18.04. It uses several functions from lib.sh.\nIts purpose is to install all necessary components to deploy osctrl in an Ubuntu 18.04 system, although it could be easily adapted to work in CentOS 7.\nExecute ./deploy/provision.sh [-h|--help] to show the usage of the script:\n$ ./deploy/provision.sh -h Usage: ./deploy/provision.sh [-h|--help] [PARAMETER [ARGUMENT]] [PARAMETER [ARGUMENT]] ... Parameters: -h, --help Shows this help message and exit. -m MODE, --mode MODE Mode of operation. Default value is dev -t TYPE, --type TYPE Type of certificate to use. Default value is self -p PART, --part PART Part of the service. Default is all Arguments for MODE: dev Provision will run in development mode. Certificate will be self-signed. prod Provision will run in production mode. update Provision will update the service running in the machine. Arguments for TYPE: self Provision will use a self-signed TLS certificate that will be generated. own Provision will use the TLS certificate provided by the user. certbot Provision will generate a TLS certificate using letsencrypt/certbot. More info here: https://certbot.eff.org/ Arguments for PART: admin Provision will deploy only the admin interface. tls Provision will deploy only the TLS endpoint. all Provision will deploy both the admin and the TLS endpoint. Optional Parameters: --public-tls-port PORT Port for the TLS endpoint service. Default is 443 --public-admin-port PORT Port for the admin service. Default is 8443 --private-tls-port PORT Port for the TLS endpoint service. Default is 9000 --private-admin-port PORT Port for the admin service. Default is 9001 --tls-hostname HOSTNAME Hostname for the TLS endpoint service. Default is 127.0.0.1 --admin-hostname HOSTNAME Hostname for the admin service. Default is 127.0.0.1 -X PASS --password Force the admin password for the admin interface. Default is random -U --update Pull from master and sync files to the current folder -c PATH --certfile PATH Path to supplied TLS server PEM certificate(s) bundle -d DOMAIN --domain DOMAIN Domain for the TLS certificate to be generated using letsencrypt -e EMAIL --email EMAIL Domain for the TLS certificate to be generated using letsencrypt -s PATH --source PATH Path to code. Default is /vagrant -S PATH --dest PATH Path to binaries. Default is /opt/osctrl -n --nginx Install and configure nginx as TLS termination -P --postgres Install and configure PostgreSQL as backend -M --metrics Install and configure all services for metrics (InfluxDB + Telegraf + Grafana) -E --enroll Enroll the serve into itself using osquery. Default is disabled Examples: Provision service in development mode, code is in /vagrant and both admin and tls: ./deploy/provision.sh -m dev -s /vagrant -p all Provision service in production mode using my own certificate and only with TLS endpoint: ./deploy/provision.sh -m prod -t own -k /etc/certs/my.key -c /etc/certs/cert.crt -p tls Update service in development mode and running admin only from /home/foobar/osctrl: ./deploy/provision.sh -U -s /home/foobar/osctrl -p admin  "
},
{
	"uri": "https://osctrl.net/components/nginx/",
	"title": "nginx",
	"tags": [],
	"description": "",
	"content": " TLS termination using nginx This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/usage/",
	"title": "Usage",
	"tags": [],
	"description": "",
	"content": " Usage Work in progress. This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/usage/dockerize.sh/",
	"title": "dockerize.sh",
	"tags": [],
	"description": "",
	"content": "dockerize.sh is the provisioning script for osctrl in a Docker environment. It needs a docker-compose.yml and requires docker-compose to be installed.\nIt uses several functions from /deploy/lib.sh.\nExecute ./docker/dockerize.sh -h to show the usage of the script:\n$ ./docker/dockerize.sh -h Usage: ./docker/dockerize.sh -h [PARAMETER] [PARAMETER] ... Parameters: -h\tShows this help message and exit. -b\tBuilds new docker containers. -u\tRun osctrl containers. -c\tGenerates configuration files. -f\tForces the generation of new certificates and configuration. -m\tUses mkcert (https://github.com/FiloSottile/mkcert) to generate certificate. -d\tTakes down running containers. -x\tRemoves container images. Examples: Run dockerized osctrl building new containers and forcing to generate new configuration/certs: ./docker/dockerize.sh -u -b -f Generate only configuration files: ./docker/dockerize.sh -c  "
},
{
	"uri": "https://osctrl.net/components/backend/",
	"title": "Backend",
	"tags": [],
	"description": "",
	"content": " Backend service to store osctrl data This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": " Like any other open source projects, there are multiple ways to contribute to osctrl. As a developer, depending on your skills and experience, or as user that enjoy the project and want to help.\nReporting Bugs If you found something broken and not working properly, feel free to create an issue in Github with as much information as possible on how to reproduce the issue and logs, if possible. Before opening the issue, make sure that:\n You have read this documentation. You are using the latest stable version of osctrl. You already searched other issues to see if your problem or request was already reported.  Improving the Documentation You can improve this documentation by forking its repository, updating the contents and sending a pull request.\nWe ❤️ Pull Requests A pull request does not need to be a fix for a bug or implementing something new. Software can always be improved, legacy code removed and tests are always welcome!\nPlease do not be afraid of contributing code, making sure it follows the following rules:\n Your code compiles, does not break any of the existing code in the master branch and does not cause conflicts. The code is readable and has comments, that aren\u0026rsquo;t superfluous or unnecessary. An overview or context is provided as body of the Pull Request. It does not need to be too extensive.  Extra points if your code comes with tests!\n"
},
{
	"uri": "https://osctrl.net/components/metrics/",
	"title": "Metrics",
	"tags": [],
	"description": "",
	"content": " Monitoring and metrics for osctrl This is not completed yet.\n"
},
{
	"uri": "https://osctrl.net/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " osctrl What is osctrl? osctrl is a fast and efficient osquery management solution, implementing its remote API as TLS endpoint.\nWith osctrl you are able to:\n Monitor all your systems running osquery. Distribute its configuration fast. Collect all the status and result logs, whether you want to store them or forward them. Run on-demand queries. Carve files.  "
},
{
	"uri": "https://osctrl.net/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://osctrl.net/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]